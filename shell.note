1.运行Linux程序有3种方法：
    1>使文件具有可执行权限，直接运行文件；
    2>直接调用命令解释器执行程序
    3>使用source执行命令

2.whereis 查询完整路径

3.Linux shell可执行命令有3种：内建命令、shell函数和外部命令
    1>内建命令就是shell程序本身包含的命令。在执行内建命令时，没有进程的创建和消亡。
    2>shell函数是一系列的程序代码，以shell语言写成
    3>外部命令是独立于shell的可执行程序，例如find、grep、，命令行shell在执行外部命令时，会创建一个当前shell的复制进程来执行，在执行过程中，存在进程的创建和消亡。

    note：只有内建命令才能改变命令行shell的属性设置（环境变量）

4.source file：
    source执行shell脚本时，不会创建子进程，而是在父进程中直接执行！

5.shell不区分变量类型，一切都是字符串，但可以进行比较和整数操作，关键因素是：变量中的字符串值是否为数字。

    变量名＝值，＝号两边不要有任何空格。在名称前加上$符号来获取变量的值。赋值内容包含空格时，请加上引号。$with_space 事实上是${with_space}的简写形式，在可能会引起错误的时候，可以用${with_sapce}。

6.变量不加$的时候，变量可能存在如下几种情况：变量被声明或被赋值；变量被unset；或者变量被export。

7.单双引号：
    被一对双引号括起来的变量替换是不会被阻止的，所以双引号被称为部分引用，也称为“弱引用”，单引号中变量替换就会被禁止，变量名只会被解释成字面意思，不会发生变量替换，所以单引号被称为“全引用”，也称为“强引用”。
    eg
    >>>var=123
    >>>echo '$var'
    $var
    >>>echo "$var"
    123

8.变量值可以是空值（“NULL”），就是不包含任何字符，在算数操作中，这个未初始化的变量常常看起来是0，但这是一个未文档化的行为，并且不可移植。

9.Linux Shell 局部变量必须明确以local声明，否则就是全局可见的。

10.echo 命令的任务就是输出一行文本。

11.如果一个脚本要设置一个环境变量，那么需要将这些变量“export”出来，也就是需要通知到脚本本地的环境。这是export命令的功能。
    一个脚本只能够export变量到这个脚本所产成的子进程，也就是说只能够对这个脚本所产生的命令和和进程起作用。如果脚本是从命令行中调用的，那么这个脚本所export得变量是不能影响命令行环境的。当使用source命令时，因为没有产生子进程，此时export命令将影响父进程的环境。
    expot [-fnp][变量名称]＝[变量设置值]

    export命令设置适用于当前shell的环境变量值。修改后维持不变，直到当前shell消亡，在脚本中执行对父shell进程环境没有影响，如果要吧对环境变量的设置永久保存，可以在export命令置于shell登录时执行的启动文件中。env命令则可以临时改变环境变量值。

11.unset 命令从当前shell中删除函数或变量。删除变量时，使用-v选项（默认情况），删除函数时使用-f选项：
eg  
    >echo $vari
    123
    >unset vari
    >echo $vari
    Null
    >hello() "echo "hello,world!"
    >unset -f hello

12. $#:代表传入函数的参数的个数
    $@:代表所有参数的内容
