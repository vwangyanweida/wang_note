四、高级特性

1.静态方法和属性：
    1> 类的静态方法和属性用static声明，php5有效，php4不行
    2> 访问时用class::$aNum; class::syaHello();方式调用，
    3> 一个子类可以使用parent关键字来访问父类，而不使用其类名。
    4> 要从当前类访问静态方法或属性，可以使用self关键字。self指向当前类。$this指向当前对象。所以不能再静态方法中使用$this伪变量。
    5> 只有在使用parent关键字调用方法的时候，才能对一个非静态方法进行静态形式的调用，其他任何情况都需要先生成一个对象，然后使用->符号调用对象中的方法。实际上可以直接用 类名::方法()   来调用类中的方法。

    为什么使用静态方法和属性
    1> 在代码的任意地方都可以使用，不需要再对象间传递类的实例，也不需要将实例存放到全局变量中，就可以访问类的方法。
    2> 所有实例都可以访问类的静态属性，可以利用静态属性来设置值，该值可以被类的所有对象使用。
    3> 不需要实例对象就可以访问静态属性或方法。

2.常量
    常量一旦设置后就不能改变，用const关键字来声明，只能用大写字母来命名常量，并且不需要$符号。
    常量属性只包含基本数据类型的值，像静态属性一样，只能通过类而不能通过类的实例访问常量属性。引用常量时不需要用美元符号作为前导符，如下所示：
        print ShopProduct::AVAILABLR

    当需要在类的所有实例中都能访问某个属性，并且属性值无需改变时，应该用常量。

3.抽象类
    抽象类不能直接实例化，php使用abstract关键字定义一个抽象类。
    大多数情况下，抽象类至少包含一个抽象方法，抽象方法用abstract关键字声明，其中不能有具体内容。可以像声明普通类方法那样声明抽象方法，但要以分号而不是方法体结束。eg。
    abstract class ShopProductWriter{
        protected $products = array();
        public function addProduct($shopProduct){
            $this->products[] = $shopProduct;
        }

        abstract public function write();
    }

    抽象类的每个子类都必须实现抽象类中的所有抽象方法，或者把他们自身也声明为抽象方法。

4.接口
    抽象类提供了具体实现的标准，而接口则是纯粹的模板。接口只能定义功能，而不包含实现的内容。接口可用关键字interface来声明。接口可以包含属性和方法声明，但是方法体为空。
    eg
        interface Chargeable{
            public function getPrice();
        }
任何实现接口的类都要实现接口中所定义的所有方法，否则该类必须声明为abstract。
一个类可以在声明中使用implements关键字来实现某个接口。这么做以后，实现接口的具体过程和扩展一个仅包含抽象方法的抽象类是一样的。
    eg
        class ShopProduct implements Chargeable {
            public function getPrice*() { return ($this->price - $this->discount);}
        }

5.延迟静态绑定：static关键字
    超类中的self与this对对象所起的作用并不完全相同。self指的不是调用上下文，它指的是解析上下文，因此在超类中返回新建对象  return new self();在子类中调用并不会返回子类的对象，它返回的永远是超类自己。php5.3引用了延迟静态绑定的概念。static类似于self，但它指的是被调用的类而不是包含类，这样它就可以生成子类的对象
    eg
        Document::create()  将生成一个Document对象而不是超类的对象。
        
    eg
        abstract class DomainObject {
            public static function create(){
                return new static();
             }
        }
        
6.
final 关键字可以终止类的继承。final类不能有子类，final方法不能被覆写。

7.
php中call_user_func类似于Python中类的get方法，相当于反射。
call_user_func 函数类似于一种特别的调用函数的方法，使用方法如下： 

note:静态调用非静态方法在5.3之前版本是允许的，但是在5.3之后建议用static写成静态方法，在5.3之后版本静态调用非静态方法会报标准化错误。！！！

理解php静态调用非静态方法：
http://www.cnblogs.com/yjf512/archive/2012/09/12/2682556.html
 
 1.调用普通函数： 
 <?php
 function a($b,$c) 
 {
   echo $b;
   echo $c;
 }
 call_user_func('a', "111","222");
 call_user_func('a', "333","444");
     //显示 111 222 333 444
?>

2.调用类的方法（包括类的静态的方法与实例对象方法）
<?php
class a {
    function b($i) 
    {
        echo $i;
    }
    public static c($k)
    {
        echo $k;
    }
}

//当php <5.3时，可以如下使用，此时会把 b()方法当作是a的一个静态方式。
call_user_func(array("a", "b"),"111");
//当php >=5.3时，类的公开的非静态的方法必须在类实例化后方可被调用，否则会提示Strict性错误（为了兼容先前及以后的版本，还是用对象方法传入）。
$obj=new a;
call_user_func(array($obj, "b"),"111");//显示 111 
//静态方法可以如下方式调用
call_user_func(array("a", "b"),"111");
//或
call_user_func("a::b","111");
?>

call_user_func_array函数和call_user_func很相似，只不过是换了一种方式传递了参数，让参数的结构更清晰:
 
<?php
function a($b, $c) 
{
    echo $b;
    echo $c;

}
call_user_func_array('a', array("111", "222"));
//显示 111 222
?>
 
call_user_func_array 函数也可以调用类内部的方法的，只不过是后面传参要以数组的形式传入而已。

<?php
Class ClassA
{

    function bc($b, $c) {
         $bc = $b + $c;
         echo $bc;
    }
    function d(){
         $bc = $b + $c;
         echo $bc;
    }
}
//php<5.3时，非静态的方法可直接传入类名
call_user_func_array(array('ClassA','bc'), array("111", "222"));
//php>=5.3时，非静态的方法 只有在类被实例化后方可调用，否则会提示Strict性错误
$obj=new classA;
call_user_func_array(array($obj,'bc'), array("111", "222"));
//静态方法调用如下
call_user_func_array(array('ClassA','bc'), array("111", "222"));
//或
call_user_func_array('ClassA::bc', array("111", "222"));
?>

五、对象工具

1.命名空间
    从本质上说，命名空间就是一个容器，你可以将类、函数和变量放在其中。在命名空间中，你可以无条件地访问这些项。在命名空间之外，必须导入或引用命名空间，才能访问它所包含的项。
    命名空间在不同的文件中时，use 命名空间还要require命名空间所在的文件，否则找不到命名空间。命名空间实在使用它时才去加载。如使用new myClass();
    没有声明命名空间的代码在全局空间中。使用时用根目录开头即"\com\util"。

2.自动加载
    php5引入了__autoload()拦截器方法来自动包含类文件。__autoload()应该被写成单个参数的方法。当PHP引擎遇到试图实例化未知类的操作时，会调用__autoload()方法（如果已经定义），并将类名当作字符串参数传递给它。
    eg
        function __autoload($classname){
            include_once("$classname.php");
        }
 
3.类函数和对象函数
    PHP允许使用字符串来动态的引用类：
        eg  
            //Task.php
            namespace tasks;
            class Task {
                function doSpeak(){
                    print "hello \n";
                }
            }

            //TaskRunner.php
            $classname = "Task";
            require_once("task/{$classname}.php");
            $classname = "tasks\\$classname";
            $myObj = new $classname();   //这里直接用一个字符串生成一个对象，简直直接就是反射。
            $myObj->doSpeak();

    查找类：class_exists()函数接受表示类的字符串，检查并返回布尔值。如果类存在，则返回true，否则返回false。
    也可以用get_declared_classes()函数来获得脚本进程中定义的所有类的数组。
    get_class()函数检查对象的类。它接受任何对象作为参数，并以字符串的形式返回类名。

    了解类中的方法
    可以使用get_class_methods()函数来得到一个类中所有方法的列表。该函数需要一个类名作为参数，返回包含类中所有方法名的数组。注意，这个方法只返回public函数。
    print_r(get_class_methods('CdProduct'));
    
    我们可以以字符串变量的形式给出方法名，然后通过对象动态的调用类方法，（似乎完全都是反射啊）eg
            $product = getProduct();
            $method = "getTitle";
            print $product->$method();//调用方法    反射
    如果类方法不存在，会因为发生错误而失败，所以要检测方法是否存在：
        if (in_array($method,get_class_methods($product))){
            print $product->$method(); //调用方法
        }
    其实PHP为此提供了更专业的工具，可以用函数is_callable()和method_exists()来检查。两个函数中is_callable()更高级些，它接受字符串变量形式的方法名作为第一个参数，如果类方法存在且可被调用，则返回true，如果要检测类中的方法是否可以被调用，可以给函数传递一个数组而不是类方法名作为参数。数组必须包含对象或类名，以将其作为它的第一个元素，要检查的方法名则作为第二个元素。如果该方法在类中存在，函数会返回true。
    if (is_callable(array($product,$method))){
        print $product->$method();
    }

    method_exists()函数的参数为一个对象（或者类名）和一个方法名，并且如果给定方法在对象的类中存在，则返回true。
    if (method_exists($product,$method)){
        print $product->$method();
    }

    注意：对于private、protected和public方法，method_exists()都返回true，但只能调用public的方法。

4.类属性
    get_class_vars()函数，接受类名作为参数，返回关联和数组。只显示public属性。
    
5.get父类
    get_parent_class()需要一个对象或者类名作为参数，并且如果父类存在的话，就返回父类的名字。如果不存在这样的类，就返回false。

    is_subclass_of()函数检测类是否是另一个类的派生类。他需要接受一个子类对象和父类的名字。如果第二个参数是第一个参数的父类的话，该函数就返回true；
    eg
        $product = getProduct();
        if (is_subclass_of($product,'ShopProduct')){......}

    检测一个类是否实现了某个接口，应当使用instanceof操作符。或者class_implements()，使用一个类名或者一个对象引用作为参数，并且返回一个由接口构成的数组。
    if (in_array('someInterface',class_implements($product))){}

6.方法调用
    1.使用字符串来动态调用
        $product = getProduct()
        $method = "getTitle";
        print $product->$method();
   
   2.使用call_user_func()方法来达到相同的目的。call_user_func()可以调用方法或函数。要调用一个函数，需要将字符串作为它的第一个参数：
        $returnVal = call_user_func("myFunction");
    要调用类方法，则需要一个数组。数组的第一个元素是一个对象，第二个元素则是要调用的方法名。
        $returnVal = call_user_func(array($myObj,"methodName"));
    传任意参数到call_user_func()
        $returnVal = call_user_func(array($myObj,"methodName"),20);
        等价于$myObj->methodName(20);
    
    call_user_func_array()函数更好。它把目标方法所需的任何参数当作数座来接受。


    __call()方法，当未定义的方法被客户端调用时，会调用__call()方法。

7.反射API
    Reflection                      为类的摘要信息提供静态函数export()
    ReflectionClass                 类信息和工具
    ReflectionMethod                类方法和工具
    ReflectionParameter             方法参数信息
    ReflectionProperty              类属性信息
    ReflectionFunction              函数信息和工具
    ReflectionExtension             PHP扩展信息
    ReflectionException             错误类

    利用反射API中的这些类，可以在运行时访问对象、函数和脚本中的扩展信息。
    由于反射API非常强大，你应该经常使用反射API而少用类和函数对象函数。
    反射的另一用途是根据命名规则创建一个调用模板类中的方法的框架。

    1.ReflectionClass提供揭示给定类所有信息的方法。它的构造方法接受类名作为它的唯一参数：
        $prod_class = new ReflectionClass('CdProduct');
        Reflection::export($prod_class);
    Reflection有一个静态方法export(),用于格式化和输出Reflection对象管理的数据(即任何实现Reflector接口的类的实例).

    于var_dump()相比较，var_dump()函数是汇总数据的通用工具，但使用var_dump()在提取摘要前必须实例化一个对象，并且反射比较详细。

    .................

六、对象设计

    面向对象和过程式编程的一个核心区别是如何分配职责
	
	
	
七、和angularjs交互时，angularjs的对象传递到thinkphp后端时，格式是stand object，需要用（array）强制数组类型转换。