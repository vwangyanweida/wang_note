1. Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程

    daemonize no

2. 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定

    pidfile /var/run/redis.pid

3. 指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字

    port 6379

4. 绑定的主机地址

    bind 127.0.0.1

5.当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能

    timeout 300

6. 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose

    loglevel verbose

7. 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null

    logfile stdout

8. 设置数据库的数量，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id

    databases 16

9. 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合

    save <seconds> <changes>

    Redis默认配置文件中提供了三个条件：

    save 900 1

    save 300 10

    save 60 10000

    分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。

 

10. 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大

    rdbcompression yes

11. 指定本地数据库文件名，默认值为dump.rdb

    dbfilename dump.rdb

12. 指定本地数据库存放目录

    dir ./

13. 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步

    slaveof <masterip> <masterport>

14. 当master服务设置了密码保护时，slav服务连接master的密码

    masterauth <master-password>

15. 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH <password>命令提供密码，默认关闭

    requirepass foobared

16. 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息

    maxclients 128

17. 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区

    maxmemory <bytes>

18. 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no

    appendonly no

19. 指定更新日志文件名，默认为appendonly.aof

     appendfilename appendonly.aof

20. 指定更新日志条件，共有3个可选值： 
    no：表示等操作系统进行数据缓存同步到磁盘（快） 
    always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全） 
    everysec：表示每秒同步一次（折衷，默认值）

    appendfsync everysec

 

21. 指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）

     vm-enabled no

22. 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享

     vm-swap-file /tmp/redis.swap

23. 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0

     vm-max-memory 0

24. Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值

     vm-page-size 32

25. 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。

     vm-pages 134217728

26. 设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4

     vm-max-threads 4

27. 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启

    glueoutputbuf yes

28. 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法

    hash-max-zipmap-entries 64

    hash-max-zipmap-value 512

29. 指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）

    activerehashing yes

30. 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件

    include /path/to/local.conf
31. Redis可以为每个键设置生存时间（Time To Live，TTL），生存时间到期后键会自动被删除

32. 在性能上Redis是单线程模型，而Memcached支持多线程,但redis的性能已经足够优越。

33. 作为缓存系统，Redis还可以限定数据占用的最大内存空间，在数据达到空间限制后可以按照一定的规则自动淘汰不需要的键。

34. Redis 的可执行文件  redis-server  redis服务器，redis-cli Redis命令行客户端，redis-benchmark Redis性能测试工具，redis-check-aof AOF文件修复工具，redis-check-dump RDB文件修复工具。

35. Redis提供了一个配置文件的模板redis.conf，位于源代码目录的根目录中。
除此之外还可以在Redis运行时通过CONFIG SET 命令在不重新启动Redis的情况下动态
修改部分Redis配置。就像这样：
redis>CONFIG SET loglevel warning

36. 并不是所有的配置都可以使用CONFIG SET命令修改，附录B列出了哪些配置能够使用该命令修改。同样在运行的时候也可以使用CONFIG GET命令获得Redis当前的配置情况，例如：
redis>CONFIG GET loglevel
1) "loglevel"
2) "warning"
其中第一行字符串回复表示的是选项名，第二行即是选项值。

37.  第1章介绍过Redis是一个字典结构的存储服务器，而实际上一个Redis实例提供了多个用来存储数据的字典，客户端可以指定将数据存储在哪个字典中。这与我们熟知的在一个关系数据库实例中可以创建多个数据库类似，所以可以将其中的每个字典都理解成一个独立的数据库。每个数据库对外都是以一个从0开始的递增数字命名，Redis默认支持16个数据库，可以通过配置参数databases来修改这一数字。客户端与Redis建立连接后会自动选择0号数据库，不过可以随时使用SELECT命令更换数据库，如要选择1号数据库：

38. 一个字符串类型键允许存储的数据的最大容量是512MB① 。

39. string:
       SET key value 增
       GET key       查

40. 前面说过字符串类型可以存储任何形式的字符串，当存储的字符串是整数形式时，Redis提供了一个实用的命令INCR，其作用是让当前键值递增，并返回递增后的值，用法为：
redis＞INCR num
(integer) 1
redis＞INCR num
(integer) 2
当要操作的键不存在时会默认键值为0，所以第一次递增后的结果是1。当键值不是整数
时Redis会提示错误：

1．增加指定的整数
INCRBY key increment
INCRBY命令与INCR命令基本一样，只不过前者可以通过increment参数指定一次增加的
数值，如：
redis＞INCRBY bar 2
(integer) 2
redis＞INCRBY bar 3
(integer) 5

2．减少指定的整数
DECR key
DECRBY key decrement
DECR命令与INCR命令用法相同，只不过是让键值递减，例如：
redis＞DECR bar
(integer)4
而DECRBY命令的作用不用介绍想必读者就可以猜到，DECRBY key 5 相当于INCRBY
key -5。

3．增加指定浮点数
INCRBYFLOAT key increment
INCRBYFLOAT 命令类似INCRBY命令，差别是前者可以递增一个双精度浮点数，如：
redis＞INCRBYFLOAT bar 2.7
"6.7"
redis＞INCRBYFLOAT bar 5E+4
"50006.69999999999999929"

4．向尾部追加值
APPEND key value
    APPEND作用是向键值的末尾追加value。如果键不存在则将该键的值设置为value，即相当于SET key value。返回值是追加后字符串的总长度。例如：

redis＞SET key hello
OK
redis＞APPEND key " world!"
(integer) 12

5．获取字符串长度
STRLEN key
STRLEN命令返回键值的长度，如果键不存在则返回0。例如：

6．同时获得/设置多个键值
MGET key [key …]
MSET key value [key value …]
MGET/MSET与GET/SET相似，不过MGET/MSET可以同时获得/设置多个键的键值。例
如：

7．位操作
GETBIT key offset
SETBIT key offset value
BITCOUNT key [start] [end]
BITOP operation destkey key [key …]
一个字节由8个二进制位组成，Redis提供了4个命令可以直接对二进制位进行操作。为了
演示，我们首先将foo键赋值为bar：
redis＞SET foo bar
OK
bar的3个字母对应的ASCII码分别为98、97和114，转换成二进制后分别为1100010、
1100001和1110010，所以foo键中的二进制位结构如图3-3所示。
图3-

redis＞GETBIT foo 0
(integer) 0
redis＞GETBIT foo 6
(integer) 1

如果需要获取的二进制位的索引超出了键值的二进制位的实际长度则默认位值是0：
redis＞GETBIT foo 100000
(integer) 0
SETBIT 命令可以设置字符串类型键指定位置的二进制位的值，返回值是该位置的旧值。
如我们要将foo键值设置为aar，可以通过位操作将foo键的二进制位的索引第6位设为0，第7位
设为1：
redis＞SETBIT foo 6 0
(integer) 1
redis＞SETBIT foo 7 1
(integer) 0
redis＞GET foo
"aar"

41. Hash:散列类型不能嵌套其他的数据类型。一个散列类型键可以包含至多232-1个字段。
提示 除了散列类型，Redis的其他数据类型同样不支持数据类型嵌套。比如集合类型的每个元素都只能是字符串，不能是另一个集合或散列表等。

HSET key field value
HGET key field
HMSET key field value [field value …]
HMGET key field [field …]
HGETALL key
HSET命令用来给字段赋值，而HGET命令用来获得字段的值。用法如下：
redis＞HSET car price 500
(integer) 1
redis＞HSET car name BMW
(integer) 1
redis＞HGET car name
"BMW"

42.  HSET命令的方便之处在于不区分插入和更新操作，这意味着修改数据时不用事先判断字段是否存在来决定要执行的是插入操作（update）还是更新操作（insert）。当执行的是插入操作时（即之前字段不存在）HSET命令会返回1，当执行的是更新操作时（即之前字段已经存在）HSET命令会返回0。更进一步，当键本身不存在时，HSET命令还会自动建立它。

提示 在Redis中每个键都属于一个明确的数据类型，如通过HSET命令建立的键是散
列类型，通过SET命令建立的键是字符串类型等。使用一种数据类型的命令操作另一种数
据类型的键会提示错误：“ERR Operation against a key holding the wrong kind of value”① 。

当需要同时设置多个字段的值时，可以使用HMSET命令。例如，下面两条语句
HSET key field1 value1
HSET key field2 value2
可以用HMSET命令改写成
HMSET key field1 value1 field2 value2
相应地，HMGET命令可以同时获得多个字段的值：
redis＞HMGET car price name
1) "500"
2) "BMW"

1. 如果想获取键中所有字段和字段值却不知道键中有哪些字段时（如3.3.1节介绍的存储汽
车对象的例子，每个对象拥有的属性都未必相同）应该使用HGETALL命令。如：
redis＞HGETALL car
1) "price"
2) "500"
3) "name"
4) "BMW"

2．判断字段是否存在
HEXISTS key field

3．当字段不存在时赋值
HSETNX key field value
HSETNX① 命令与HSET命令类似，区别在于如果字段已经存在，HSETNX命令将不执行
任何操作。其实现可以表示为如下伪代码：
注释：①HSETNX 中的“NX”表示“if Not eXists”（如果不存在）。

4．增加数字
HINCRBY key field increment
上一节的命令拾遗部分介绍了字符串类型的命令INCRBY，HINCRBY命令与之类似，可
以使字段值增加指定的整数。散列类型没有HINCR命令，但是可以通过HINCRBY key field 1来实现。HINCRBY命令的示例如下：
redis＞HINCRBY person score 60
(integer) 60
之前person键不存在，HINCRBY命令会自动建立该键并默认score字段在执行命令前的值
为“0”。命令的返回值是增值后的字段值。

5．删除字段
HDEL key field [field …]
HDEL命令可以删除一个或多个字段，返回值是被删除的字段个数：
redis＞HDEL car price
(integer) 1
redis＞HDEL car price
(integer) 0

43. Hash其他常用命令 ：
1．只获取字段名或字段值
HKEYS key
HVALS key
有时仅仅需要获取键中所有字段的名字而不需要字段值，那么可以使用HKEYS命令，就
像这样：
redis＞HKEYS car
1) "name"
2) "model"
HVALS命令与HKEYS命令相对应，HVALS命令用来获得键中所有字段值，例如：
redis＞HVALS car
1) "BMW"
2) "C200"
2．获得字段数量
HLEN key
例如：
redis＞HLEN car
(integer) 2

43. 列表类型：
    列表类型（list）可以存储一个有序的字符串列表，常用的操作是向列表两端添加元素，或者获得列表的某一个片段。列表类型内部是使用双向链表（double linked list）实现的，所以向列表两端添加元素的时间复杂度为0(1)，获取越接近两端的元素速度就越快。
！！！与散列类型键最多能容纳的字段数量相同，一个列表类型键最多能容纳232-1个元素。
1．向列表两端增加元素
LPUSH key value [value …]
RPUSH key value [value …]
LPUSH命
redis＞LPUSH numbers 1
(integer) 1

redis＞LPUSH numbers 2 3
(integer) 3

2．从列表两端弹出元素
LPOP key
RPOP key

3．获取列表中元素的个数
LLEN key
当键不存在时LLEN会返回0：
redis＞LLEN numbers
(integer) 3
LLEN命令的功能类似SQL语句SELECT COUNT(＊) FROM table_name，但是LLEN的时间
复杂度为0(1)，使用时Redis会直接读取现成的值，而不需要像部分关系数据库（如使用InnoDB存储引擎的MySQL 表）那样需要遍历一遍数据表来统计条目数量。

4．获得列表片段
LRANGE key start stop
LRANGE命令是列表类型最常用的命令之一，它能够获得列表中的某一片段。LRANGE命
令将返回索引从start到stop之间的所有元素（包含两端的元素）。与大多数人的直觉相同，Redis
的列表起始索引为0：
redis＞LRANGE numbers 0 2
1) "2"
2) "1"
3) "0"
LRANGE命令在取得列表片段的同时不会像LPOP一样删除该片段，另外LRANGE命令与
很多语言中用来截取数组片段的方法slice有一点区别是LRANGE返回的值包含最右边的元素，
LRANGE命令也支持负索引，表示从右边开始计算序数，如"-1"表示最右边第一个元
素，"-2"表示最右边第二个元素，依次类推：
redis＞LRANGE numbers -2 -1
1) "1"
2) "0"

5．删除列表中指定的值
LREM key count value
LREM命令会删除列表中前count个值为value的元素，返回值是实际删除的元素个数。根
据count值的不同，LREM命令的执行方式会略有差异：
●当count＞0时LREM命令会从列表左边开始删除前count个值为value的元素；
●当count＜0时LREM 命令会从列表右边开始删除前|count|个值为value的元素；
●当count=0是LREM命令会删除所有值为value的元素。例如：
redis＞RPUSH numbers 2
(integer) 4
redis＞LRANGE numbers 0 -1
1) "2"
2) "1"
3) "0"
4) "2"

6. list常用命令

1．获得/设置指定索引的元素值
LINDEX key index
LSET key index value
如果要将列表类型当作数组来用，LINDEX命令是必不可少的。LINDEX命令用来返回指
定索引的元素，索引从0开始。如：
redis＞LINDEX numbers 0"
2"
如果index是负数则表示从右边开始计算的索引，最右边元素的索引是-1。例如：
redis＞LINDEX numbers -1
"0"
LSET是另一个通过索引操作列表的命令，它会将索引为index的元素赋值为value。例如：
redis＞LSET numbers 1 7
OK
redis＞LINDEX numbers 1 
redis> "7"

2．只保留列表指定片段
LTRIM key start end
LTRIM命令可以删除指定索引范围之外的所有元素，其指定列表范围的方法和LRANGE
命令相同。就像这样：
redis＞LRANGE numbers 0 1
1) "1"
2) "2"
3) "7"
4) "3"
"0"
redis＞LTRIM numbers 1 2
OK
redis＞LRANGE numbers 0 1
1) "2"
2) "7"
LTRIM命令常和LPUSH命令一起使用来限制列表中元素的数量，比如记录日志时我们希
望只保留最近的100条日志，则每次加入新元素时调用一次LTRIM命令即可：

3．向列表中插入元素
LINSERT key BEFORE|AFTER pivot value
LINSERT命令首先会在列表中从左到右查找值为pivot的元素，然后根据第二个参数是
BEFORE还是AFTER来决定将value插入到该元素的前面还是后面。LINSERT命令的返回值是插入后列表的元素个数

4．将元素从一个列表转到另一个列表R
POPLPUSH source destination
RPOPLPUSH是个很有意思的命令，从名字就可以看出它的功能：先执行RPOP命令再执行
LPUSH 命令。RPOPLPUSH命令会先从source列表类型键的右边弹出一个元素，然后将其加入到destination列表类型键的左边，并返回这个元素的值，整个过程是原子的。

当把列表类型作为队列使用时，RPOPLPUSH命令可以很直观地在多个队列中传递数据。
当source和destination相同时，RPOPLPUSH命令会不断地将队尾的元素移到队首

44.set类型

在集合中的每个元素都是不同的，且没有顺序。一个集合类型（set）键可以存储至多232-1个字符串。
集合类型在Redis内部是使用值为空的散列表（hash table）实现的，所以这些操作的时间复杂度都是0(1)

1．增加/删除元素
SADD key member [member …]
SREM key member [member …]

2．获得集合中的所有元素
SMEMBERS key
SMEMBERS命令会返回集合中的所有元素，例如：
redis＞SMEMBERS letters
1) "b"
2) "a"
3．判断元素是否在集合中
SISMEMBER key member

4．集合间运算
SDIFF key1 [key2 …]  差集 key1 - key2
SINTER key [key …]   交集
SUNION key [key …]   并集

SDIFF 命令支持同时传入多个键，例如：
redis＞SADD setC 2 3
(integer) 2
redis＞SDIFF setA setB setC
1 ) "1"

1．获得集合中元素个数
SCARD key
SCARD命令用来获得集合中的元素个数

2．进行集合运算并将结果存储
SDIFFSTORE destination key [key …]
SINTERSTORE destination key [key …]
SUNIONSTORE destination key [key …]

3．随机获得集合中的元素
SRANDMEMBER key [count]
SRANDMEMBER命令用来随机从集合中获取一个元素，如：
redis＞SRANDMEMBER letters
"a"
redis＞SRANDMEMBER letters
"b"
redis＞SRANDMEMBER letters
"a"

还可以传递count参数来一次随机获得多个元素，根据count的正负不同，具体表现也不同。
（1）当count为正数时，SRANDMEMBER会随机从集合里获得count个不重复的元素。如果
count的值大于集合中的元素个数，则SRANDMEMBER会返回集合中的全部元素。
（2）当count为负数时，SRANDMEMBER会随机从集合里获得|count|个的元素，这些元素有可能相同。为了示例，我们先在letters集合中加入两个元素：
redis＞SADD letters c d
(integer) 2

4．从集合中弹出一个元素
SPOP key

44.有序集合sorted set

在集合类型的基础上有序集合类型为集合中的每个元素都关联了一个分数，这使得我们
不仅可以完成插入、删除和判断元素是否存在等集合类型支持的操作，还能够获得分数最高
（或最低）的前N个元素、获得指定分数范围内的元素等与分数有关的操作。虽然集合中每个元
素都是不同的，但是它们的分数却可以相同。
有序集合类型在某些方面和列表类型有些相似。
（1）二者都是有序的。
（2）二者都可以获得某一范围的元素。
但是二者有着很大的区别，这使得它们的应用场景也是不同的。
（1）列表类型是通过链表实现的，获取靠近两端的数据速度极快，而当元素增多后，访问
中间数据的速度会较慢，所以它更加适合实现如“新鲜事”或“日志”这样很少访问中间元素的
应用。
（2）有序集合类型是使用散列表和跳跃表（Skip list）实现的，所以即使读取位于中间部分
的数据速度也很快（时间复杂度是O(log(N))）。
（3）列表中不能简单地调整某个元素的位置，但是有序集合可以（通过更改这个元素的分
数）。
（4）有序集合要比列表类型更耗费内存。
有序集合类型算得上是 Redis的5种数据类型中最高级的类型了，在学习时可以与列表类
型和集合类型对照理解。

1．增加元素
ZADD key score member [score member …]
ZADD命令用来向有序集合中加入一个元素和该元素的分数，如果该元素已经存在则会
用新的分数替换原有的分数。ZADD命令的返回值是新加入到集合中的元素个数（不包含之前已经存在的元素）。
redis＞ZADD scoreboard 89 Tom 67 Peter 100 David
(integer) 3
分数不仅可以是整数，还支持双精度浮点数：
redis＞ZADD testboard 17E+307 a
(integer) 1
redis＞ZADD testboard 1.5 b
(integer) 1
redis＞ZADD testboard +inf c
(integer) 1
redis＞ZADD testboard -inf d
(integer) 1

2．获得元素的分数
ZSCORE key member
示例如下：
redis＞ZSCORE scoreboard Tom
"89"

3．获得排名在某个范围的元素列表
ZRANGE key start stop [WITHSCORES]
ZREVRANGE key start stop [WITHSCORES]

如果需要同时获得元素的分数的话可以在ZRANGE命令的尾部加上WITHSCORES参数，
这时返回的数据格式就从“元素1, 元素2, …, 元素n”变为了“元素1, 分数1, 元素2, 分数2, …, 元素n, 分数n”，例如：
redis＞ZRANGE scoreboard 0 -1 WITHSCORES
1) "Peter"
2) "76"
3) "Tom"
4) "89"
5) "David"
6) "100"

如果两个元素的分数相同，Redis会按照字典顺序（即"0"＜"9"＜"A"＜"Z"＜"a"＜"z"这样的顺序）来进行排列。再进一步，如果元素的值是中文怎么处理呢？答案是取决于中文的编码方式，如使用UTF-8编码：

ZREVRANGE命令和ZRANGE的唯一不同在于ZREVRANGE命令是按照元素分数从大到
小的顺序给出结果的。

4．获得指定分数范围的元素
ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]

ZRANGEBYSCORE命令参数虽然多，但是都很好理解。该命令按照元素分数从小到大的
顺序返回分数在min和max之间（包含min和max）的元素：
redis＞ZRANGEBYSCORE scoreboard 80 100
1) "Tom"
2) "David"

5．增加某个元素的分数
Z INCRBY key increment member
ZINCRBY命令可以增加一个元素的分数，返回值是更改后的分数。例如，想给Jerry加4分：
redis＞ZINCRBY scoreboard 4 Jerry
"60"
increment也可以是个负数表示减分，例如，给Jerry减4分：
redis＞ZINCRBY scoreboard -4 Jerry
" 56"
如果指定的元素不存在，Redis在执行命令前会先建立它并将它的分数赋为0再执行操作。

6. 有序集合常用命令：
1．获得集合中元素的数量
ZCARD key
例如：
redis＞ZCARD scoreboard
(integer) 6
2．获得指定分数范围內的元素个数
ZCOUNT key min max
例如：
redis＞ZCOUNT scoreboard 90 100
(integer) 2
ZCOUNT命令的min和max参数的特性与ZRANGEBYSCORE命令中的一样：
redis＞ZCOUNT scoreboard (89 +inf
(integer) 2
3．删除一个或多个元素
ZREM key member [member …]
ZREM命令的返回值是成功删除的元素数量（不包含本来就不存在的元素）。
redis＞ZREM scoreboard Wendy
(integer) 1
redis＞ZCARD scoreboard
(integer) 5

4．按照排名范围删除元素
ZREMRANGEBYRANK key start stop
ZREMRANGEBYRANK命令按照元素分数从小到大的顺序（即索引0表示最小的值）删除
处在指定排名范围内的所有元素，并返回删除的元素数量。如：
redis＞ZADD testRem 1 a 2 b 3 c 4 d 5 e 6 f
(integer) 6
redis＞ZREMRANGEBYRANK 0 2
(integer) 3
redis＞ZRANGE testRem 0 -1
1) "d"
2) "e"
3) "f"

5．按照分数范围删除元素
ZREMRANGEBYSCORE key min max
ZREMRANGEBYSCORE命令会删除指定分数范围内的所有元素，参数min和max的特性
和ZRANGEBYSCORE命令中的一样。返回值是删除的元素数量。如：
redis＞ZREMRANGEBYSCORE testRem (4 5
(integer) 1
redis＞ZRANGE testRem 0 -1
1) "d"
2) "f"

6．获得元素的排名
ZRANK key member
ZREVRANK key member
ZRANK命令会按照元素分数从小到大的顺序获得指定的元素的排名（从0开始，即分数最
小的元素排名为0）。如：
redis＞ZRANK scoreboard Peter
(integer) 0
ZREVRANK命令则相反（分数最大的元素排名为0）：
redis＞ZREVRANK scoreboard Peter
(integer) 4

7．计算有序集合的交集
ZINTERSTORE destination numkeys key [key …] [WEIGHTS weight [weight …]]
[AGREGATE SUM|MIN|MAX]
