1. 在入口文件里可以绑定入口模块
    define('BIND_MODULE','Admin');

2. 有些情况下，我们需要更改应用目录、运行时目录和框架的位置，那么可以修改
    入口文件如下：
    // 定义应用目录
    define('APP_PAT H','./Apps/');
    // 定义运行时目录
    define('RUNT IME_PAT H','./Runtime/');
    // 更名框架目录名称，并载入框架入口文件
    require './T hink/T hinkPHP.php';

3.define('APP_DEBUG', true); // 开启调试模式
    开发时打开调试模式可以抛出更多的出错信息，单影响性能。正式部署时关闭，避免邪路服务器WEB目录信息等资料

4.控制器
    需要为每个控制器定义一个控制器类，控制器类的命名规范是： 控制器名
    +Controller.class.php （模块名采用驼峰法并且首字母大写）

    一个模块可以包括多个操作方法，但如果操作方法是portected或者private的类型的话，是无法直接通过URL访问到的。

5.视图
    thinkphp在渲染模板的时候如果不指定模板，则会采用系统默认的定位规则，其定义规范默认是模块目录下面的 View/控制器名/操作名.html

    要输出视图，必须在控制器方法中进行模板渲染输出操作
    eg。
        $this->assign('name',$name);
        $this->display();

6.CURD
    thinkphp 使用add、save、select和delete方法表示模型的CURD操作。

    D函数和M函数不同，D函数需要有对应的模型类。
    模型类的定义规范是：模型名+Model.class.php(驼峰法且首字母大写)

    如果使用D函数实例化模型类，一般需要对应一个数据模型类，而且create方法会自动把表单提交的数据进行自动验证和自动完成（如果有定义的话），如果自动验证失败，就可以通过模型的getError方法获取验证提示信息，如果验证通过，就表示数据对象已经成功创建，但目前只是保存在内存中，直到我们调用add方法写入数据到数据库。

1.insert
    所以Form表单提交数据到数据库使用两步：
    1.create方法创建数据对象
    2.使用add方法把当前的数据对象写入数据库。

    不适用表单的话可以直接用add方法
        eg
            $Form = D('Form')
            $data['title'] = 'ThinkPHP'
            $data['content'] = '表单内容';
            $Form->add($data);   //从上可以看出，add同样经历了Form类中定义的数据检验和补全，测试一下。

D方法实例化自定义的model类，M实例化基础Model类

2.read
    select 方法获取数据集，find方法获取一个单一数据，只需查询某个字段的值，还可以用getField方法。
    eg
        $Form = M('Form');
        $title = $Form->where('id=3')->getField('title');

3.update
    我们同样可以使用create方法创建表单提交的数据，而save方法则会自动把当前的数据对象更新到数据库，而更新的条件其实就是表的主键。
    就是把add换成save。
    save方法会自动识别数据对象中的主键字段，并作为更新条件，也可以显示的传入更新条件。where方法。
    eg。
        $Form = M("Form");
        $data['title'] = 'Thinkphp';
        $data['content'] = 'ThinkPHP 3.23';
        $From->where('id=5')->save($data);

    有时候我们只需要修改某个字段的值，就可以使用setField方法，而不需要每次都调用save方法。
    eg
        $Form = M("Form");
        $Form->where('id=5')->setField('title','Thinkphp');

    对于统计字段，系统还提供了更加方便的setInc和setDec方法。
    eg
        $User = M("User")；
        $User->where('id=5')->setInc('score',3);
        $User->where('id=5')->setDec('socre',5);

4.delete
    $Form = M("Form");
    $Form->delete(5);
    表示删除主键为5的数据，delete方法可以删除单个数据，也可以删除多个数据，这取决于删除条件。
    eg  
        $User = M("User");
        $User->where('id=5')->delete();
        $User->delete('1,2,5);//删除主键为1,2,5的用户数据 


查询语言

thinkphp的ORM已经解决了不同数据库的差异性，不同的数据库查询方式几乎一样。
1.使用数组作为查询条件
    1-1：如果进行多字段查询，那么字段之间的默认逻辑关系是 逻辑与 AND
        $User = M("User"); // 实例化User对象
        $condition['name'] = 'thinkphp';
        $condition['status'] = 1;
        // 把查询条件传入查询方法
        $User->where($condition)->select();

    1-2:改变默认的逻辑判断，通过_logic定义查询逻辑：
        $User = M("User"); // 实例化User对象
        $condition['name'] = 'thinkphp';
        $condition['account'] = 'thinkphp';
        $condition['_logic'] = 'OR'; //查询条件是OR
        // 把查询条件传入查询方法
        $User->where($condition)->select();

2.表达式查询
    查询表达式的使用格式：
        $map['字段名'] = array('表达式','查询条件');表达式不区分大小写

        EXP：表达式，支持更复杂的查询情况
        例如：
            $map['id'] = array('in','1,3,8');
        可以改成：
            $map['id'] = array('exp',' IN (1,3,8) ');
        exp查询的条件不会被当场字符串，所以后面的查询条件可以使用任何SQL支持的语法，包括使用函数和字段名称。查询表达式不仅可以用于查询条件，也可以用于数据更新，eg
        $User = M('User');
        $data['name'] = 'ThinkPHP';
        $data['score'] = array('exp','score+1');
        $User->where('id=5')->save($data);

3.快捷查询

